/****************************************************************************
Copyright (c) 2004 - 2015 Qualcomm Technologies International, Ltd.

FILE NAME
    audio_plugin_if.h

DESCRIPTION

*/

/*!
@file   audio_plugin_if.h
@brief  Header file for the audio plugin interface.

    The parameters / enums here define the message interface used for the
    audio plugin.
    i.e This defines the interface between the audio library and the underlying plugin

    The contents of these are similar to the parameters passed into the
    audio library itself

    These messages are generated by the audio library and received in the message handler
    associate with the constant task of an audio plugin.

    The company_name_action_plugin.c / h files contain the meessage handler which
    receives these messages.

    The plugin itself is responsible for acting upon these messages.

*/


#ifndef _AUDIO_PLUGIN_INTERFACE_H_
#define _AUDIO_PLUGIN_INTERFACE_H_

#include <library.h>
#include <power.h>
#include <stream.h>

/* Coefficient used by DSP to calculate the actual sample rate from u16 sent by VM */
#define DSP_RESAMPLING_RATE_COEFFICIENT 10

#define DSP_CODEC_INPUT_PORT    0
#define TONE_VP_MIXING_DSP_PORT 3
#define NUMBER_OF_DSP_OUTPUTS   7

/* Kalimba Message IDs */

#define LOW_LATENCY_READY_MSG       (0x1000)
#define LOW_LATENCY_SETMODE_MSG     (0x1001)
#define LOW_LATENCY_VOLUME_MSG      (0x1002)
#define LOW_LATENCY_SETPARAM_MSG    (0x1004)
#define LOW_LATENCY_CODEC_MSG       (0x1006)
#define LOW_LATENCY_PING            (0x1008)
#define LOW_LATENCY_PINGRESP        (0x1009)
#define LOW_LATENCY_CVC_SEC_PASSED  (0x100c)
#define LOW_LATENCY_SETSCOTYPE      (0x100d)
#define LOW_LATENCY_GETPARAM        (0x1010)
#define LOW_LATENCY_GETPARAM_RESP   (0x1011)
#define LOW_LATENCY_LOADPARAMS_MSG  (0x1012)
#define LOW_LATENCY_CVC_SEC_FAILED  (0x1013)
#define LOW_LATENCY_LOAD_PERSIST    (0x1014)
#define LOW_LATENCY_LOAD_PERSIST_RESP (0x1015)
#define LOW_LATENCY_STORE_PARAMS    (0x1033)
#define LOW_LATENCY_APTX_SEC_PASSED (0x1035)
#define LOW_LATENCY_SIGNAL_DET_SET_PARAMS_MSG (0x1018)
#define LOW_LATENCY_SIGNAL_DET_STATUS (0x1019)
#define LOW_LATENCY_SOFT_MUTE       (0x101A)
#define LOW_LATENCY_SET_PLUGIN_MSG  (0x1024)
#define LOW_LATENCY_APTX_SEC_FAILED (0x1034)
#define LOW_LATENCY_CUR_EQ_BANK     (0x1028)
#define LOW_LATENCY_STOREPERSIST_MSG (0x1016)
#define MESSAGE_SET_SAMPLE_RATE     (0x7050)
#define LOW_LATENCY_PARAMS_LOADED_MSG (0xffff)
#define LOW_LATENCY_SET_EQ_MSG      (0x1039)

#define MUSIC_READY_MSG             (0x1000)
#define MUSIC_SETMODE_MSG           (0x1001)
#define MUSIC_VOLUME_MSG            (0x1002)
#define MUSIC_SETPARAM_MSG          (0x1004)
#define MUSIC_CODEC_MSG             (0x1006)
#define MUSIC_FORWARD_UNDECODED_MSG (0x1007)
#define MUSIC_PING                  (0x1008)
#define MUSIC_PINGRESP              (0x1009)
#define MUSIC_SETSCOTYPE            (0x100d)
#define MUSIC_SETCONFIG             (0x100e)
#define MUSIC_SETCONFIG_RESP        (0x100f)
#define MUSIC_GETPARAM              (0x1010)
#define MUSIC_GETPARAM_RESP         (0x1011)
#define MUSIC_LOADPARAMS_MSG        (0x1012)
#define MUSIC_CUR_EQ_BANK           (0x1014)
#define MUSIC_PARAMS_LOADED_MSG     (0x1015)
#define MUSIC_SILENCE_DETECTION_PARAMS_MSG (0x1018)
#define MUSIC_SIGNAL_DETECT_STATUS  (0x1019)
#define MUSIC_VOLUME_AUX_MSG        (0x101b)
#define MUSIC_SET_PLUGIN_MSG        (0x1020)
#define CONFIGURE_LATENCY_REPORTING (0x1027)
#define MUSIC_TONE_COMPLETE         (0x1080)


#define RELAY_MODE_NONE             (0)
#define RELAY_MODE_SHAREME          (1)
#define RELAY_MODE_TWS_MASTER       (2)
#define RELAY_MODE_TWS_SLAVE        (3)
#define MESSAGE_SET_RELAY_MODE      (0x1028)

#define TWS_ROUTING_STEREO          (0)
#define TWS_ROUTING_LEFT            (1)
#define TWS_ROUTING_RIGHT           (2)
#define TWS_ROUTING_DMIX            (3)
#define MESSAGE_VM_TWS_COMPATIBILITY_MODE (0x715D)
#define MESSAGE_SET_TWS_ROUTING     (0x7157)

#define MESSAGE_SET_DEVICE_TRIMS    (0x7158)
#define MESSAGE_ENABLE_EXT_VOLUME   (0x7159)


/*
Received when signal detector status has changed
Param1 == 0 => no audio - go into standby
Param1 == 1 => receiving audio - come out of standby
*/
#define MUSIC_SIGNAL_DETECTOR_STATUS_RESP  (0x1019)

#define MUSIC_PS_BASE               (0x2270) /* PSKEY_USERDSP_24 */
#define MUSIC_PS_BASE_WBS_BACK_CHANNEL (0x2270)  /* PSKEY_USERDSP_24 */

#define APTX_PARAMS_MSG             (0x1016)
#define APTX_SECURITY_MSG           (0x1017)
#define APTX_SECPASSED_MSG          (0x100c)
#define APTX_SECFAILED_MSG          (0x1013)
#define MESSAGE_SET_APTX_LL_PARAMS1 (0x1036)
#define MESSAGE_SET_APTX_LL_PARAMS2 (0x1037)
#define KALIMBA_MSG_LATENCY_REPORT  (0x1023)
#define KALIMBA_MSG_RELAY_MODE_RESP (0x1024)
#define KALIMBA_MSG_EXTERNAL_VOLUME (0x715A)
#define KALIMBA_MSG_TWS_ERROR       (0x715B)

#define MESSAGE_SET_DAC_SAMPLE_RATE      (0x1070)
#define MESSAGE_SET_CODEC_SAMPLE_RATE    (0x1071)
#define MESSAGE_SET_TONE_RATE_MESSAGE_ID (0x1072)
#define MESSAGE_SET_SPDIF_CONFIG_MSG     (0x1073)
#define MESSAGE_SET_AC3_CONFIG_MSG       (0x1074)
#define KALIMBA_MSG_DSP_SPDIF_EVENT_MSG  (0x1075)
#define MESSAGE_GET_AC3_USER_INFO_MSG    (0x1077)

#define MESSAGE_SET_MULTI_CHANNEL_OUTPUT_TYPES  (0x10a0)
#define MESSAGE_SET_I2S_CONFIG_MSG              (0x10a1)

#define MESSAGE_MULTI_CHANNEL_MUTE_MAIN         (0x10a2)
#define MESSAGE_MULTI_CHANNEL_MUTE_AUX          (0x10a3)

#define MESSAGE_SET_ANC_MODE (0x10a4)

#define DSP_GAIA_MSG_SET_USER_PARAM                (0x121a)
#define DSP_GAIA_MSG_GET_USER_PARAM                (0x129a)
#define DSP_GAIA_MSG_SET_USER_GROUP_PARAM          (0x121b)
#define DSP_GAIA_MSG_GET_USER_GROUP_PARAM          (0x129b)

#define DSP_GAIA_MSG_SET_USER_PARAM_RESP           (0x321a)
#define DSP_GAIA_MSG_GET_USER_PARAM_RESP           (0x329a)
#define DSP_GAIA_MSG_SET_USER_GROUP_PARAM_RESP     (0x321b)
#define DSP_GAIA_MSG_GET_USER_GROUP_PARAM_RESP     (0x329b)

#define MUSIC_SYSMODE_STANDBY        0
#define MUSIC_SYSMODE_PASSTHRU       1
#define MUSIC_SYSMODE_FULLPROC       2
#define MUSIC_SYSMODE_FULLPROC_MONO  3
#define MUSIC_SYSMODE_PASSTHRU_MONO  4
#define MUSIC_SYSMODE_STANDBY_MONO   5
#define MUSIC_SYSMODE_BASSMANAGEMENT 6
#define MUSIC_SYSMODE_BASSMANAGEMENT_MONO 7

#define MUSIC_DO_NOT_CHANGE_EQ_BANK      0
#define MUSIC_NEXT_EQ_BANK               1
#define MUSIC_SET_EQ_BANK                2

/* Mesage parameter selection masks */
#define MUSIC_RATE_MATCH_DISABLE        0x80
#define MUSIC_AUDIO_IF_MASK             0x00ff
#define MUSIC_LOCAL_PLAYBACK_MASK       0x0100
#define LOCAL_FILE_PLAYBACK             0x100
#define PCM_PLAYBACK                    0x200

/* Params for word 1 of MESSAGE_SET_TONE_RATE_MESSAGE_ID */
#define PROMPT_STEREO                   0x1     /* 1= stereo, 0 = mono*/
#define PROMPT_ISPROMPT                   0x2     /* 1= prompt, 0 =tone */

/* flag used to inform DSP app about the ANC sample rate using MESSAGE_SET_ANC_MODE */
#define DSP_ANC_SAMPLE_RATE_NONE    0
#define DSP_ANC_SAMPLE_RATE_96K     1
#define DSP_ANC_SAMPLE_RATE_192K    2

/* when using a subwoofer, fix the DAC/I2S output rate at 48KHz to 
   allow resampling for I2S outputs to work */
#define FIXED_SUBWOOFER_DAC_SAMPLE_RATE 48000

/* operating status of the DSP */
typedef enum  DspStatusTag
{
    DSP_NOT_LOADED,
    DSP_LOADING,
    DSP_LOADED_IDLE,
    DSP_RUNNING,
    DSP_ERROR
}DSP_STATUS_INFO_T;

/*the Mode*/
typedef enum AudioModeTag
{
    AUDIO_MODE_MUTE_MIC       ,
    AUDIO_MODE_MUTE_SPEAKER   ,
    AUDIO_MODE_UNMUTE_SPEAKER ,
    AUDIO_MODE_MUTE_BOTH      ,
    AUDIO_MODE_CONNECTED      ,   /* (FULL_PROCESSING) */
    AUDIO_MODE_LEFT_PASSTHRU  ,
    AUDIO_MODE_RIGHT_PASSTHRU ,
    AUDIO_MODE_LOW_VOLUME     ,
    AUDIO_MODE_STANDBY
}AUDIO_MODE_T ;

/*the audio route*/
typedef enum AudioRouteTag
{
    AUDIO_ROUTE_INTERNAL,
    AUDIO_ROUTE_I2S,
    AUDIO_ROUTE_SPDIF,
    AUDIO_ROUTE_INTERNAL_AND_RELAY
}AUDIO_ROUTE_T;

/*the audio sink type*/
typedef enum AudioSinkTag
{
    AUDIO_SINK_INVALID  ,
    AUDIO_SINK_SCO      ,
    AUDIO_SINK_ESCO     ,
    AUDIO_SINK_AV       ,
    AUDIO_SINK_USB      ,
    AUDIO_SINK_ANALOG   ,
    AUDIO_SINK_SPDIF    ,
    AUDIO_SINK_FM
} AUDIO_SINK_T ;

/* operating modes of the soundbar sub connection */
typedef enum AudioSubTypeTag
{
    AUDIO_SUB_WOOFER_NONE ,
    AUDIO_SUB_WOOFER_ESCO ,
    AUDIO_SUB_WOOFER_L2CAP
} AUDIO_SUB_TYPE_T;

/* Soft mute modes supported by the low latency DSP applications */
typedef enum AudioSoftMuteTypeTag
{
    unmute_sink_and_sub = 0,    /* Unmute both Sink and Sub */
    mute_sink_not_sub = 1,      /* Mute sink but not sub (only unmute sub) */
    mute_sub_not_sink = 2,      /* Mute sub but not sink (only unmute sink) */
    mute_sink_and_sub = 3       /* Mute both sink and sub */
} AUDIO_LL_SOFT_MUTE_TYPE_T;

/*  Mute groups supported by the soft mute interface, for normal DSP applications.
    Also used to define the bits in mute state bit-fields.
 */
typedef enum
{
    audio_mute_group_main = 0,
    audio_mute_group_aux,
    audio_mute_group_mic,
    audio_mute_group_max    /*! Not valid */
} AUDIO_MUTE_GROUP_T;

/* States each mute group can be in (bit-field bit values) */
typedef enum
{
    AUDIO_MUTE_DISABLE = 0,
    AUDIO_MUTE_ENABLE
} AUDIO_MUTE_STATE_T;

/* Macros representing a mute state bit-field with all bits enabled/disabled */
#define AUDIO_MUTE_DISABLE_ALL  (0x0)
#define AUDIO_MUTE_ENABLE_ALL   ((AUDIO_MUTE_ENABLE << audio_mute_group_max) - 1)

/* Function macro to generate a mute mask for a specific mute group bit */
#define AUDIO_MUTE_MASK(mute_group) (1 << mute_group)

typedef enum
{
    OUTPUT_INTERFACE_TYPE_NONE   = 0,
    OUTPUT_INTERFACE_TYPE_DAC    ,
    OUTPUT_INTERFACE_TYPE_I2S    ,
    OUTPUT_INTERFACE_TYPE_SPDIF
} AUDIO_OUTPUT_TYPE_T;

typedef enum
{
    INPUT_TYPE_PCM = 0,
    INPUT_TYPE_AC3 = 1,
    INPUT_TYPE_AAC = 2,
    INPUT_TYPE_MP3 = 4
} AUDIO_SPDIF_INPUT_TYPE_T;

typedef enum
{
    DUT_MIC_A = 0,
    DUT_MIC_B = 1,
    DUT_MIC_C = 2,
    DUT_MIC_D = 3
} AUDIO_DUT_MIC_T;

/*  TWS buffer levels have been increased to give better performance in scatternet
    operation, to maintain baackwards compatibility with older products it is
    now necessary to send a message to the DSP to select the amount of internal
    buffering to be used, legacy products using 250ms, TWS version 3.1 and above
    using 350ms */
typedef enum 
{
    PEER_BUFFER_350MS = 0,
    PEER_BUFFER_250MS = 1,
    PEER_BUFFER_NON_PEER_DEVICE
}peer_buffer_level;

/* feature bits supplied to the audio plugins */
typedef struct
{
    unsigned manual_source_selection:1;
    unsigned unused1:1;
    AUDIO_ROUTE_T audio_input_routing:2;
    AUDIO_SPDIF_INPUT_TYPE_T spdif_supported_data_types:4;
    unsigned stereo:1;
    AUDIO_DUT_MIC_T dut_microphone:2;
    unsigned force_resampling_of_tones:1;
    unsigned unused:2;
    unsigned use_one_mic_back_channel:1;
    unsigned use_two_mic_back_channel:1;
} AudioPluginFeatures;

/* spdif ac3 decoder configuration */
typedef struct
{
    BITFIELD compression_mode:2;
    BITFIELD boost_ratio:7;
    BITFIELD cut_ratio:7;
}spdif_ac3_config_word1;

typedef struct
{
    BITFIELD unused:2;
    BITFIELD output_mode:1;
    BITFIELD stereo_mixing_mode:2;
    BITFIELD channel_to_route_right:3;
    BITFIELD channel_to_route_left:3;
    BITFIELD enable_channel_routing:1;
    BITFIELD dual_mode_mono:2;
    BITFIELD karaoke_enable:1;
    BITFIELD lfe_output_enable:1;
}spdif_ac3_config_word2;

typedef struct
{
    u16 configuration_word_1;
    u16 configuration_word_2;
}spdif_ac3_configuration;

typedef struct
{
    BITFIELD unusued:8;
    BITFIELD target_latency:8;
}spdif_target_latency;

/*the audio power level - taken from power library*/
#define AUDIO_POWER_T power_battery_level

/* Macros for creating messages */
#include <panic.h>
#define MAKE_AUDIO_MESSAGE(TYPE) TYPE##_T *message = PanicUnlessNew(TYPE##_T);
#define MAKE_AUDIO_MESSAGE_WITH_LEN(TYPE, LEN) TYPE##_T *message = (TYPE##_T *) PanicUnlessMalloc(sizeof(TYPE##_T) + LEN);


/*!  Audio Plugin Downstream Interface Messages

    These messages are sent to the audio plugin modules.

    An Audio plugin must implement all of the messages below.

*/
typedef enum audio_plugin_interface_message_type_tag
{
    AUDIO_PLUGIN_CONNECT_MSG    = AUDIO_DOWNSTREAM_MESSAGE_BASE,
    AUDIO_PLUGIN_DISCONNECT_MSG ,
    AUDIO_PLUGIN_SET_MODE_MSG   ,
    AUDIO_PLUGIN_SET_ROUTE_MSG  ,
    AUDIO_PLUGIN_SET_VOLUME_MSG ,
    AUDIO_PLUGIN_START_FORWARDING_MSG ,
    AUDIO_PLUGIN_STOP_FORWARDING_MSG ,
    AUDIO_PLUGIN_PLAY_TONE_MSG  ,
    AUDIO_PLUGIN_STOP_TONE_AND_PROMPT_MSG  ,
    AUDIO_PLUGIN_PLAY_AUDIO_PROMPT_MSG   ,
    AUDIO_PLUGIN_VOICE_PROMPTS_INIT_MSG,
    AUDIO_PLUGIN_MIC_SWITCH_MSG,
    AUDIO_PLUGIN_SET_POWER_MSG,
    AUDIO_PLUGIN_RESET_VOLUME_MSG,
    AUDIO_PLUGIN_SET_SUB_WOOFER_MSG ,
    AUDIO_PLUGIN_START_ASR,
    AUDIO_PLUGIN_SET_GROUP_VOLUME_MSG,
    AUDIO_PLUGIN_DELAY_VOLUME_SET_MSG,
    AUDIO_PLUGIN_SET_SOFT_MUTE_MSG,
    AUDIO_PLUGIN_DISCONNECT_DELAYED_MSG,
    AUDIO_PLUGIN_ALLOW_VOLUME_CHANGES_MSG,
    AUDIO_PLUGIN_SUBWOOFER_CONNECTION_TIMEOUT_MSG,
    AUDIO_PLUGIN_SET_INPUT_AUDIO_MUTE_MSG,
    AUDIO_PLUGIN_OUTPUT_SWITCH_MSG,

     /* Library message limit */
    AUDIO_DOWNSTREAM_MESSAGE_TOP

} audio_plugin_interface_message_type_t ;

/*!  Audio Plugin Upstream Messages

    These messages are sent from the audio plugins to the client Task.

    Usually the audio plugins will not send upstream messages,
    but certain plugins will send information to the application.
*/
typedef enum
{
    AUDIO_PLUGIN_DSP_IND = AUDIO_UPSTREAM_MESSAGE_BASE,
    AUDIO_PLUGIN_DSP_READY_FOR_DATA,
    AUDIO_PLUGIN_LATENCY_REPORT,
    AUDIO_PLUGIN_DSP_GAIA_EQ_MSG,
    AUDIO_PLUGIN_DSP_GAIA_GROUP_EQ_MSG,
    AUDIO_PLUGIN_REFRESH_VOLUME,
    AUDIO_PLUGIN_AUDIO_SIGNAL_DETECT_MSG,

     /* Library message limit */
    AUDIO_UPSTREAM_MESSAGE_TOP
} audio_plugin_upstream_message_type_t;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
    The plugin module should connect the Synchronous connection to its pre
    defined outputs.
*/
typedef struct
{
    /*! The audio sink to connect*/
    Sink            audio_sink ;
    /*! The type of the audio sink to connect*/
    AUDIO_SINK_T    sink_type ;
    /*! The codec task to use to connect the audio*/
    Task            codec_task ;
    /*! The volume at which to set the audio */
    u16          volume ;
    /*! The rate of the audio stream */
    u32          rate ;            
    /*! additional features that can be used in the audio plugins */
    AudioPluginFeatures features ;
    /*! The audio mode of connection required*/
    AUDIO_MODE_T    mode ;
    /*! The audio route of connection required*/
    AUDIO_ROUTE_T   route ;
    /*! The audio route of connection required*/
    AUDIO_POWER_T   power ;
    /*!plugin specific parameters*/
    const void *    params ;
    /*! The application task to route upstream plugin messages to*/
    Task            app_task ;
}AUDIO_PLUGIN_CONNECT_MSG_T ;


/*!
    @brief Structure common to CVC and A2DP plugins, used to pass
    the USB Microphone Sink to the plugin.
*/
typedef struct
{
    Sink usb_sink;
} usb_common_params;


typedef enum
{
    BIAS_CONFIG_DISABLE,
    BIAS_CONFIG_MIC_BIAS_0,
    BIAS_CONFIG_MIC_BIAS_1,
    BIAS_CONFIG_PIO
} bias_config_t;

/*!
    @brief Structure common to all plugins representing mic setup
*/
typedef struct
{
    /* Bias config */
    bias_config_t bias_config:2;
    /*! Mic is digital */
    BITFIELD digital:1;
    /*! Enable pre-amp (analogue only) */
    BITFIELD pre_amp:1;
    /*! PIO to drive */
    BITFIELD pio:5;
    /*! Mic Hardware Instance */
    BITFIELD instance:2;
    /*! Mic gain */
    BITFIELD gain:5;
} audio_mic_params;



/*!
    @brief Structure common to all plugins, used to pass the Microphone
    setup to the plugin.
*/
typedef struct
{
    /*! Mic A settings */
    audio_mic_params mic_a;
    /*! Mic B settings */
    audio_mic_params mic_b;
    /*! Line A settings */
    audio_mic_params line_a;
    /*! Line B settings */
    audio_mic_params line_b;
}common_mic_params;

typedef struct
{
    usb_common_params        usb_params;
    const common_mic_params* digital;
} hfp_common_plugin_params_t;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
    The plugin module should connect the Synchronous connection to its pre
    defined outputs.
*/
typedef struct
{
    /*! The volume at which to set the audio */
    u16          volume ;
    /*! The volume at which to set the tones/vp */
    u16          tone_volume;
    /*! The codec task to use to connect the audio*/
    Task            codec_task ;
}AUDIO_PLUGIN_SET_VOLUME_MSG_T ;


/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    /*! The audio connection mode */
    u16          mode ;
    /*! plugin specific parameters*/
    const void *    params ;
}AUDIO_PLUGIN_SET_MODE_MSG_T ;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    /*! The sub audio link mode */
    AUDIO_SUB_TYPE_T  sub_woofer_type ;
    /* sub link sink */
    Sink sub_sink ;
}AUDIO_PLUGIN_SET_SUB_WOOFER_MSG_T;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    /*! The mute states to apply */
    BITFIELD    mute_states:3;
}AUDIO_PLUGIN_SET_SOFT_MUTE_MSG_T;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    /*! The audio connection mode */
    u8           route ;
    /*! plugin specific parameters*/
    const void *    params ;
}AUDIO_PLUGIN_SET_ROUTE_MSG_T ;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    /*! The sink used to forward undecoded audio frames */
    Sink  forwarding_sink ;
    /*! Flag indicating if support for content protection is required */
    bool  content_protection ;
    /* whether backwards compatibility mode of the DSP app is required, this
       controls the internal buffering delay within the DSP app, 250 or 350ms */
    u8 peer_dsp_required_buffering_level ;
}AUDIO_PLUGIN_START_FORWARDING_MSG_T ;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    /*! the tone to be played*/
    ringtone_note * tone;
    /*! Whether or not to queue the requested tone*/
    bool        can_queue ;
    /*! The codec task to use to connect the audio*/
    Task            codec_task ;
    /*! The volume at which to play the tone 0 - current volume*/
    u16      tone_volume ;
    /* features such as stereo and i2s output */
    AudioPluginFeatures features;
    /*! The audio route of connection required*/
    AUDIO_ROUTE_T   route ;
}AUDIO_PLUGIN_PLAY_TONE_MSG_T ;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    /*! the id of the audio prompt to be played*/
    u16 id ;
    /*! the language to use*/
    u16 language ;
    /*! Whether or not to queue the requested audio prompt*/
    bool        can_queue ;
    /*! The codec task to use to connect the audio*/
    Task            codec_task ;
    /*! The volume at which to play the audio prompt  0 - current volume*/
    u16      ap_volume ;
    /*! features such as stereo and i2s output */
    AudioPluginFeatures features;
    /*! The audio route of connection required*/
    AUDIO_ROUTE_T   route ;

}AUDIO_PLUGIN_PLAY_AUDIO_PROMPT_MSG_T ;


/*!
    @brief This message is generated by an audio plugin module and sent to the application Task.
*/
typedef struct
{
    /*! The id of the message sent to the application */
    u16          id ;
    /*! The numer of values sent to the application */
    u16          size_value;
    /*! The values sent to the application */
    u16          value[1] ;
}AUDIO_PLUGIN_DSP_IND_T ;



typedef struct
{
    /*! The id of the message sent to the application */
    u16          id ;
    /*! The numer of values sent to the application */
    u16          size_value;
    /*! The values sent to the application */
    u16          value[1] ;
}AUDIO_PLUGIN_DSP_GAIA_EQ_MSG_T ;


typedef struct
{
    /*! The id of the message sent to the application */
    u16          id ;
    /*! The numer of values sent to the application */
    u16          size_value;
    /*! The values sent to the application */
    u16          value[1] ;
}AUDIO_PLUGIN_DSP_GAIA_GROUP_EQ_MSG_T ;


/*!
    @brief This message is generated by an audio plugin module and sent to the application Task
    to indicate that the DSP is ready to accept data and no audio will be lost .
*/
typedef struct
{
    /* main plugin in use */
    Task plugin;
    /* audio routing currently in progress */
    void *AUDIO_BUSY;
    /* current dsp status */
    DSP_STATUS_INFO_T dsp_status;
    /* sink of media used for a2dp connection */
    Sink media_sink;
}AUDIO_PLUGIN_DSP_READY_FOR_DATA_T ;

/*!
    @brief This message is generated by an audio plugin module and sent to the application Task
    to report a change in audio decoder latency.
*/
typedef struct
{
    /* main plugin in use */
    Task audio_plugin;
    /* Flag indicating if latency value has been estimated (calculated) rather than measured */
    bool estimated;
    /* current audio latency, in milliseconds */
    u16 latency;
} AUDIO_PLUGIN_LATENCY_REPORT_T;

/*!
    @brief This message is generated by an audio plugin module and sent to the application Task
    to request that the application refresh the volume levels.
*/
typedef struct
{
    /* main plugin in use */
    Task audio_plugin;
} AUDIO_PLUGIN_REFRESH_VOLUME_T;



typedef struct
{
    bool signal_detected;
} AUDIO_PLUGIN_AUDIO_SIGNAL_DETECT_MSG_T;

typedef enum
{
    voice_prompts_codec_none,
    voice_prompts_codec_ima_adpcm,
    voice_prompts_codec_sbc,
    voice_prompts_codec_mp3,
    voice_prompts_codec_aac,
    voice_prompts_codec_pcm,
    voice_prompts_codec_tone    /* internally generated tone */
} voice_prompts_codec;


/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module.
*/
typedef struct
{
    u16                     no_prompts;
    u16                     no_languages;
}AUDIO_PLUGIN_VOICE_PROMPTS_INIT_MSG_T ;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module to configure it's power level
*/
typedef struct
{
    /*! the power level selected */
    AUDIO_POWER_T power;
}AUDIO_PLUGIN_SET_POWER_MSG_T ;


/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module to start or restart the ASR engine
*/
typedef struct
{
    /*! The audio connection mode */
    u16          mode ;
}AUDIO_PLUGIN_START_ASR_T ;

typedef enum
{
    DSP_VOLUME_CONTROL,
    DAC_VOLUME_CONTROL,
    MIXED_VOLUME_CONTROL,
    EXTERNAL_VOLUME_CONTROL
}volumeType_t;

/* Multi-channel group (see csr_multi_channel_plugin.h) */
typedef enum
{
    multi_channel_group_main,
    multi_channel_group_aux,
    multi_channel_group_all
} audio_plugin_mch_group_t;

/* Parameters for AudioSetGroupVolume */

typedef struct
{
    i16                   master;    /*! The requested master gain in dB/60 */
    i16                     tone;    /*! The requested tone gain in dB/60 */
    /*! The codec task to use to connect the audio*/
    i16       device_trim_master;    /*! TWS master trim */
    i16        device_trim_slave;    /*! TWS slave trim*/
} audio_plugin_main_vol_t;

typedef struct
{
    i16                   master;    /*! The requested master gain in dB/60 */
    i16                     tone;    /*! The requested tone gain in dB/60 */
} audio_plugin_aux_vol_t;

typedef struct
{
    audio_plugin_mch_group_t group;     /*! The group (main/aux/all) to adjust volume */
    audio_plugin_main_vol_t   main;     /*! Use this struct for multi_channel_group_main/all */
    audio_plugin_aux_vol_t     aux;     /*! Use this struct for multi_channel_group_aux/all */
}AUDIO_PLUGIN_SET_GROUP_VOLUME_MSG_T;



/* Common part of volume message */
typedef struct 
{
    u16 system;  /* The DAC system gain */
    i16  master;  /* The requested master gain in dB/60 */
    i16  tone;    /* The requested tone gain in dB/60 */
} audio_plugin_volume_common_t;

/* Message struct used for delayed application of master volume in hardware */
typedef struct
{
    audio_plugin_mch_group_t group; /*! The group (main/aux) to adjust volume */
    i16                   master; /*! The requested master gain in dB/60 */
} AUDIO_PLUGIN_DELAY_VOLUME_SET_MSG_T;

/* Trims for the main output group */
typedef struct
{
    i16 primary_left;     /* Volume trim for primary left in dB/60 */
    i16 primary_right;    /* Volume trim for primary right in dB/60 */
    i16 secondary_left;   /* Volume trim for secondary left in dB/60 */
    i16 secondary_right;  /* Volume trim for secondary right in dB/60 */
    i16 wired_sub;        /* Volume trim for sub-woofer in dB/60 */
} audio_plugin_volume_main_trim_t;

/* Trims for the aux output group */
typedef struct
{
    i16 aux_left;         /* Volume trim for aux left in dB/60 */
    i16 aux_right;        /* Volume trim for aux right in dB/60 */
} audio_plugin_volume_aux_trim_t;

/* Common message format for volume messages */
typedef struct
{
    audio_plugin_volume_common_t   common;
    union
    {
        audio_plugin_volume_main_trim_t main;
        audio_plugin_volume_aux_trim_t  aux;
    } trim;
} AUDIO_PLUGIN_SET_VOLUME_COMMON_MSG_T;

typedef AUDIO_PLUGIN_SET_VOLUME_COMMON_MSG_T AUDIO_PLUGIN_SET_AUX_VOLUME_MSG_T;
#define SIZEOF_AUDIO_PLUGIN_SET_AUX_VOLUME_MSG (sizeof(audio_plugin_volume_common_t) + \
                                                sizeof(audio_plugin_volume_aux_trim_t))

typedef AUDIO_PLUGIN_SET_VOLUME_COMMON_MSG_T AUDIO_PLUGIN_SET_MAIN_VOLUME_MSG_T;
#define SIZEOF_AUDIO_PLUGIN_SET_MAIN_VOLUME_MSG (sizeof(audio_plugin_volume_common_t) + \
                                                 sizeof(audio_plugin_volume_main_trim_t))

/* DSP Output Types Message */
typedef struct __AUDIO_PLUGIN_SET_MULTI_CHANNEL_OUTPUT_TYPES_MSG
{
    u16 out_type[NUMBER_OF_DSP_OUTPUTS];
} AUDIO_PLUGIN_SET_MULTI_CHANNEL_OUTPUT_TYPES_MSG_T;

/* DSP Multi-channel Main Mute Message */
typedef struct __AUDIO_PLUGIN_MULTI_CHANNEL_MAIN_MUTE_MSG
{
    AUDIO_MUTE_STATE_T primary_left;
    AUDIO_MUTE_STATE_T primary_right;
    AUDIO_MUTE_STATE_T secondary_left;
    AUDIO_MUTE_STATE_T secondary_right;
    AUDIO_MUTE_STATE_T wired_sub;
} AUDIO_PLUGIN_MULTI_CHANNEL_MAIN_MUTE_MSG_T;

/* DSP Multi-channel Aux Mute Message */
typedef struct __AUDIO_PLUGIN_MULTI_CHANNEL_AUX_MUTE_MSG
{
    AUDIO_MUTE_STATE_T left;
    AUDIO_MUTE_STATE_T right;
} AUDIO_PLUGIN_MULTI_CHANNEL_AUX_MUTE_MSG_T;

/* DSP Multi-channel Mute Message */
typedef union __AUDIO_PLUGIN_MULTI_CHANNEL_MUTE_MSG
{
    AUDIO_PLUGIN_MULTI_CHANNEL_MAIN_MUTE_MSG_T main;
    AUDIO_PLUGIN_MULTI_CHANNEL_AUX_MUTE_MSG_T aux;
} AUDIO_PLUGIN_MULTI_CHANNEL_MUTE_MSG_T;

/*!
    @brief This message is generated by the audio manager and is issued
    to an audio plugin module to mute or unmute the input audio port.
*/

typedef struct
{
	unsigned unused:15;
    unsigned input_audio_port_mute_active:1;           /* TRUE when input audio port is muted for all audio sources except tones */	
}AUDIO_PLUGIN_SET_INPUT_AUDIO_MUTE_MSG_T;

#endif  /*  _AUDIO_PLUGIN_INTERFACE_H_ */


